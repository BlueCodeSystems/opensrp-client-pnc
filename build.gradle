import org.gradle.api.tasks.testing.logging.TestExceptionFormat

plugins {
  id 'com.android.application' version '8.6.0' apply false
  id 'com.android.library' version '8.6.0' apply false
  id 'io.codearte.nexus-staging' version '0.30.0'
}

allprojects { project ->
  group = findProperty('GROUP') ?: 'org.smartregister'
  version = findProperty('VERSION_NAME') ?: '0.0.1-SNAPSHOT'

  configurations.configureEach {
    resolutionStrategy {
      dependencySubstitution {
        substitute(module('org.smartregister:opensrp-client-core')).using(module('io.github.bluecodesystems:opensrp-client-core:6.2.2'))
        substitute(module('com.github.BlueCodeSystems:opensrp-client-core')).using(module('io.github.bluecodesystems:opensrp-client-core:6.2.2'))
        substitute(module('org.smartregister:opensrp-client-native-form')).using(module('io.github.bluecodesystems:opensrp-client-native-form-new:3.1.3'))
        substitute(module('org.smartregister:opensrp-client-configurable-views')).using(module('com.github.BlueCodeSystems:opensrp-client-configurable-views:v2.0.1'))
        substitute(module('io.github.bluecodesystems:android-p2p-sync')).using(module('com.github.BlueCodeSystems:android-p2p-sync:v0.4.3'))
      }
      force 'com.commonsware.cwac:saferoom.x:1.3.0'
    }
    exclude group: 'com.commonsware.cwac', module: 'saferoom'
  }
}

subprojects { subproject ->
  tasks.withType(Test).configureEach { testTask ->
    maxParallelForks = 1
    forkEvery = 0
    jvmArgs(
      '--add-opens=java.base/java.lang=ALL-UNNAMED',
      '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED',
      '--add-opens=java.base/java.io=ALL-UNNAMED',
      '--add-opens=java.base/java.net=ALL-UNNAMED',
      '--add-opens=java.base/java.util=ALL-UNNAMED',
      '--add-opens=java.base/java.text=ALL-UNNAMED',
      '--add-opens=java.base/java.security=ALL-UNNAMED',
      '--add-opens=java.base/jdk.internal.reflect=ALL-UNNAMED',
      '--add-opens=java.base/jdk.internal.misc=ALL-UNNAMED',
      '--add-opens=java.base/jdk.internal.util=ALL-UNNAMED',
      '--add-opens=java.base/sun.nio.ch=ALL-UNNAMED',
      '--add-opens=java.base/sun.security.util=ALL-UNNAMED',
      '--add-opens=java.desktop/java.awt.font=ALL-UNNAMED',
      '--add-exports=java.base/jdk.internal.reflect=ALL-UNNAMED'
    )
    testTask.testLogging {
      showExceptions = true
      showStandardStreams = false
      exceptionFormat = TestExceptionFormat.FULL
    }
  }

  tasks.withType(JavaCompile).configureEach { options.fork = true; options.forkOptions.memoryMaximumSize = '2048m' }
}

nexusStaging {
  serverUrl = 'https://s01.oss.sonatype.org/service/local/'
  // username/password supplied via -PsonatypeUsername / -PsonatypePassword
}

tasks.register('clean', Delete) {
  delete rootProject.layout.buildDirectory
}
