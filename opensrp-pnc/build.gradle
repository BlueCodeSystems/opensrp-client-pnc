plugins {
  id 'com.android.library'
  id 'jacoco'
}

jacoco {
  toolVersion = '0.8.10'
}

configurations.configureEach {
  exclude group: 'net.zetetic', module: 'sqlcipher-android'
  exclude group: 'io.github.bluecodesystems', module: 'opensrp-client-utils'
}

android {
  namespace 'org.smartregister.pnc'
  compileSdk 35
  buildToolsVersion '35.0.0'

  defaultConfig {
    minSdk 28
    targetSdk 35
    versionCode (project.findProperty('VERSION_CODE')?.toString()?.toInteger() ?: 1)
    versionName project.findProperty('VERSION_NAME')?.toString() ?: '0.0.1-SNAPSHOT'
    multiDexEnabled true
    testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    buildConfigField 'String[]', 'LOCATION_LEVELS', '{"Country", "Province", "District", "Facility", "Village"}'
    buildConfigField 'String[]', 'HEALTH_FACILITY_LEVELS', '{"Country", "Province", "District", "Health Facility", "Village"}'
    buildConfigField 'String[]', 'ALLOWED_LEVELS', '{"Health Facility"}'
    buildConfigField 'String', 'DEFAULT_LEVEL', '"Health Facility"'
  }

  buildFeatures {
    buildConfig true
  }

  buildTypes {
    debug {
      enableUnitTestCoverage true
      enableAndroidTestCoverage true
    }
    release {
      minifyEnabled false
      enableUnitTestCoverage true
      enableAndroidTestCoverage true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

  lint {
    abortOnError false
  }

  packaging {
    resources {
      excludes += [
        'LICENSE.txt',
        'META-INF/LICENSE',
        'META-INF/LICENSE.txt',
        'META-INF/license.txt',
        'META-INF/NOTICE.txt',
        'META-INF/notice.txt',
        'META-INF/DEPENDENCIES',
        'META-INF/ASL2.0',
        'META-INF/INDEX.LIST'
      ]
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
    coreLibraryDesugaringEnabled true
  }

  testOptions {
    unitTests {
      returnDefaultValues = true
      includeAndroidResources = true
      all {
        jvmArgs(
          '-Xmx1024m',
          '--add-opens=java.base/java.lang=ALL-UNNAMED',
          '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED',
          '--add-opens=java.base/java.io=ALL-UNNAMED',
          '--add-opens=java.base/java.net=ALL-UNNAMED',
          '--add-opens=java.base/java.util=ALL-UNNAMED',
          '--add-opens=java.base/java.text=ALL-UNNAMED',
          '--add-opens=java.base/java.security=ALL-UNNAMED',
          '--add-opens=java.base/jdk.internal.reflect=ALL-UNNAMED',
          '--add-opens=java.base/jdk.internal.misc=ALL-UNNAMED',
          '--add-opens=java.base/jdk.internal.util=ALL-UNNAMED',
          '--add-opens=java.base/sun.nio.ch=ALL-UNNAMED',
          '--add-opens=java.base/sun.security.util=ALL-UNNAMED',
          '--add-opens=java.desktop/java.awt.font=ALL-UNNAMED',
          '--add-exports=java.base/jdk.internal.reflect=ALL-UNNAMED'
        )
        systemProperty 'robolectric.dependency.repo.url', 'https://repo1.maven.org/maven2'
        systemProperty 'robolectric.enabledSdks', '28'
      }
    }
  }
}

tasks.withType(Test).configureEach {
  jacoco {
    includeNoLocationClasses = true
    excludes = ['jdk.internal.*']
  }
}

dependencies {
  coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4'

  api('com.github.BlueCodeSystems:opensrp-client-core:v7.0.0') { transitive = true }
  api('com.github.BlueCodeSystems:opensrp-client-utils:v1.0.0') { transitive = true }
  api('com.github.BlueCodeSystems.opensrp-client-chw-anc:opensrp-client-chw-anc:v2.0.0') { transitive = false }
  api 'io.github.bluecodesystems:opensrp-plan-evaluator:1.7.0'
  api('com.github.BlueCodeSystems.Opensrp-client-native-form-new:opensrp-client-native-form:v3.1.5') { transitive = true }
  api('com.github.BlueCodeSystems:opensrp-client-configurable-views:v2.0.1') { transitive = true }

  implementation 'androidx.appcompat:appcompat:1.6.1'
  implementation 'androidx.recyclerview:recyclerview:1.3.2'
  implementation 'androidx.cardview:cardview:1.0.0'
  implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
  implementation 'com.google.android.material:material:1.12.0'
  implementation 'org.apache.commons:commons-lang3:3.12.0'
  implementation 'org.apache.commons:commons-text:1.10.0'
  implementation 'com.google.guava:guava:33.2.1-android'
  implementation 'com.google.code.gson:gson:2.10.1'
  implementation 'io.github.bluecodesystems:materialedittext:3.1.6'
  implementation 'de.hdodenhof:circleimageview:3.1.0'
  implementation 'joda-time:joda-time:2.12.7'
  implementation 'com.jakewharton.timber:timber:5.0.1'
  implementation 'com.google.android.gms:play-services-vision:20.1.3'
  implementation 'androidx.sqlite:sqlite:2.3.1'
  implementation 'com.github.BlueCodeSystems.Opensrp-client-native-form-new:circleprogressbar:v3.1.5'
  api 'org.greenrobot:eventbus:3.3.1'
  implementation 'org.jeasy:easy-rules-core:4.1.0'
  implementation 'org.jeasy:easy-rules-mvel:4.1.0'
  implementation 'net.zetetic:android-database-sqlcipher:4.5.4'

  testImplementation 'junit:junit:4.13.2'
  testImplementation 'org.mockito:mockito-core:5.11.0'
  testImplementation 'org.mockito:mockito-inline:5.2.0'
  testImplementation 'org.robolectric:robolectric:4.10.3'
  testImplementation 'androidx.test:core:1.5.0'
  testImplementation 'androidx.test.ext:junit:1.1.5'
  testImplementation 'androidx.sqlite:sqlite:2.3.1'

  androidTestImplementation 'androidx.test.ext:junit:1.1.5'
  androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
  androidTestImplementation 'androidx.test:rules:1.5.0'
}

tasks.register('jacocoTestReport', JacocoReport) {
  dependsOn 'testDebugUnitTest'
  reports {
    xml.required = true
    html.required = true
    xml.outputLocation = file("${buildDir}/reports/jacoco/jacocoRootReport/merged.xml")
    html.outputLocation = file("${buildDir}/reports/jacoco/jacocoRootReport/html")
  }
  def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/*$ViewBinder*.*']
  def debugTree = fileTree(dir: "$buildDir/intermediates/javac/debug/classes", excludes: fileFilter)
  def mainSrc = "$project.projectDir/src/main/java"
  sourceDirectories.setFrom(files(mainSrc))
  classDirectories.setFrom(files(debugTree))
  executionData.setFrom(fileTree(dir: buildDir, includes: ['jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec']))
}

apply from: '../maven.gradle'
